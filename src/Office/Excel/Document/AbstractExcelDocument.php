<?phpnamespace Nemundo\Office\Excel\Document;use Nemundo\Core\Base\Document\AbstractDocument;use Nemundo\Core\Http\Response\HttpResponse;use Nemundo\Core\Http\Response\ResponseType;use PhpOffice\PhpSpreadsheet\Spreadsheet;use PhpOffice\PhpSpreadsheet\Writer\Xlsx;abstract class AbstractExcelDocument extends AbstractDocument{    /**     * @var string     */    protected $filename = 'document.xlsx';    /**     * @var Spreadsheet     */    private $spreadsheet;    /**     * @var int     */    private $rowCount = 1;    function __construct()    {        $this->spreadsheet = new Spreadsheet();    }    public function addBoldRow($row)    {        $this->addRow($row, true);    }    public function addRow($row, $bold = false)    {        $count = 1;        foreach ($row as $value) {            $this->spreadsheet->setActiveSheetIndex(0)->setCellValue([$count, $this->rowCount], $value);            if ($bold) {                $this->spreadsheet->setActiveSheetIndex(0)->getStyle([$count, $this->rowCount])->getFont()->setBold(true);            }            $count++;        }        $this->rowCount++;    }    public function addEmptyRow()    {        $this->addRow([]);    }    protected function writeFileIntern($filename)    {        foreach ($this->spreadsheet->getActiveSheet()->getColumnIterator() as $column) {            $this->spreadsheet->getActiveSheet()->getColumnDimension($column->getColumnIndex())->setAutoSize(true);        }        $writer = new Xlsx($this->spreadsheet);        $writer->save($filename);    }    protected function onWrite($fullFilename)    {        $this->writeFileIntern($fullFilename);    }    protected function onRender()    {        $response = new HttpResponse();        $response->contentType = ResponseType::EXCEL;        $response->attachmentFilename = $this->filename;        $response->sendResponse();        $this->writeFileIntern('php://output');    }}