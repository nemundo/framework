<?phpnamespace Nemundo\Office\Excel\Reader;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\Csv\Reader\CsvRow;use Nemundo\Core\Csv\Reader\CsvTrait;use PhpOffice\PhpSpreadsheet\Cell\Coordinate;use PhpOffice\PhpSpreadsheet\IOFactory;abstract class AbstractLargeExcelReader extends AbstractBase{    use CsvTrait;    use ExcelTrait;    protected $header = [];    abstract protected function loadReader();    abstract protected function onRow(ExcelRow $excelRow);    public function readData() {        $this->loadReader();        $this->spreadsheet = IOFactory::load($this->filename);        //(new Debug())->write($this->spreadsheet->getSheetNames());        $objWorksheet = null;        if ($this->sheetName == null) {            $objWorksheet = $this->spreadsheet->getActiveSheet();        } else {            // falls Sheet Name kein String ist            if (!is_string($this->sheetName)) {                $this->sheetName = strval($this->sheetName);            }            $objWorksheet = $this->spreadsheet->getSheetByName($this->sheetName);        }        $highestRow = $objWorksheet->getHighestRow();        $highestColumn = $objWorksheet->getHighestColumn();        $highestColumnIndex = Coordinate::columnIndexFromString($highestColumn);        $count = 0;        //$dataHeader = [];        for ($row = 1; $row <= $highestRow; ++$row) {            $item = [];            for ($col = 1; $col <= $highestColumnIndex; $col++) {                $item[] = trim($objWorksheet->getCellByColumnAndRow($col, $row)->getValue());            }            if ($count >= $this->lineOfStart) {                if ($this->useFirstRowAsHeader) {                    if ($count == $this->lineOfStart) {                        //$dataHeader = $item;                        $this->header = $item;                    } else {                        $itemNew = [];                        $rowCount = 0;                        //foreach ($dataHeader as $rowHeader) {                        foreach ($this->header as $rowHeader) {                            //(new Debug())->write($rowHeader);                            //$itemNew[$rowHeader] = $item[$rowCount];                            $itemNew[$rowHeader] = $item[$rowCount];                            $rowCount++;                        }                        $dataRow = new ExcelRow($itemNew);                        //$this->addItem($dataRow);                        $this->onRow($dataRow);                    }                } else {                    $dataRow = new ExcelRow($item);                    //$this->addItem($dataRow);                    $this->onRow($dataRow);                }            }            $count++;        }    }}