<?phpnamespace Nemundo\Office\Excel\Reader;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\Csv\Reader\CsvTrait;use Nemundo\Core\Debug\Debug;use PhpOffice\PhpSpreadsheet\Cell\Coordinate;use PhpOffice\PhpSpreadsheet\IOFactory;abstract class AbstractLargeExcelReader extends AbstractBase{    use CsvTrait;    use ExcelReaderTrait;    protected $header = [];    /**     * @var bool     */    private $stopReading = false;    abstract protected function loadReader();    abstract protected function onRow(ExcelRow $excelRow);    public function readData()    {        $this->loadReader();        $chunkSize = 10;        try {            //$this->spreadsheet = IOFactory::load($this->filename);            //(new Debug())->write($this->spreadsheet->getSheetNames());            $reader = IOFactory::createReaderForFile($this->filename);            $reader->setReadDataOnly(true);            $chunkFilter = new ChunkReadFilter();            $reader->setReadFilter($chunkFilter);            //exit;            //$objWorksheet = null;            /*if ($this->sheetName == null) {                $objWorksheet = $this->spreadsheet->getActiveSheet();            } else {                // falls Sheet Name kein String ist                if (!is_string($this->sheetName)) {                    $this->sheetName = strval($this->sheetName);                }                $objWorksheet = $this->spreadsheet->getSheetByName($this->sheetName);            }            $highestRow = $objWorksheet->getHighestRow();*/            $startRow = 1;            $rowIndex=0;            while (true) {                (new Debug())->write('chunk1');                $chunkFilter->setRows($startRow, $chunkSize);                (new Debug())->write('chunk2');                $spreadsheet = $reader->load($this->filename);                if ($this->sheetName == null) {                    $objWorksheet = $spreadsheet->getActiveSheet();                } else {                    // falls Sheet Name kein String ist                    if (!is_string($this->sheetName)) {                        $this->sheetName = strval($this->sheetName);                    }                    $objWorksheet = $spreadsheet->getSheetByName($this->sheetName);                }                $highestRow = $objWorksheet->getHighestRow();                $highestColumn = $objWorksheet->getHighestColumn();                $highestColumnIndex = Coordinate::columnIndexFromString($highestColumn);                $count = 0;                //$dataHeader = [];                //(new Debug())->write($highestRow);                //exit;                if ($highestRow < $startRow) {                    // Ende erreicht                    $spreadsheet->disconnectWorksheets();                    unset($spreadsheet);                    break;                }                for ($row = $startRow; $row <= $highestRow; $row++) {                    if ($this->stopReading) {                        break;                    }                    $item = [];                    for ($col = 1; $col <= $highestColumnIndex; $col++) {                        //$value = $objWorksheet->getCell([$col, $row])->getValue();                        $value = $objWorksheet->getCellByColumnAndRow($col, $row)->getValue();                        if ($value !== null) {                            $value = trim($value);                        }                        $item[] = $value;                    }                    if ($rowIndex >= $this->lineOfStart) {                        if ($this->useFirstRowAsHeader) {                            if ($rowIndex == $this->lineOfStart) {                                $this->header = $item;                            } else {                                $itemNew = [];                                $rowCount = 0;                                foreach ($this->header as $rowHeader) {                                    $itemNew[$rowHeader] = $item[$rowCount];                                    $rowCount++;                                }                                $dataRow = new ExcelRow($itemNew);                                $this->onRow($dataRow);                            }                        } else {                            $dataRow = new ExcelRow($item);                            $this->onRow($dataRow);                        }                    }                    //$count++;                    $rowIndex++;                }                $spreadsheet->disconnectWorksheets();                unset($spreadsheet);                $startRow += $chunkSize;            }        } catch(\Exception $exception) {            (new Debug())->write($exception->getMessage());        }    }    protected function stopReading()    {        $this->stopReading = true;        return $this;    }}