<?phpnamespace Nemundo\Office\Excel\Reader;use Nemundo\Core\Csv\Reader\AbstractCsvReader;use PhpOffice\PhpSpreadsheet\Cell\Coordinate;use PhpOffice\PhpSpreadsheet\IOFactory;use PhpOffice\PhpSpreadsheet\Spreadsheet;class ExcelReader extends AbstractCsvReader{    /**     * @var string     */    public $filename;    /**     * @var bool     */    public $useFirstRowAsHeader = true;    /**     * @var string     */    protected $sheetName;    /**     * @var Spreadsheet     */    private $spreadsheet;    /**     * @return ExcelRow[]     */    public function getData()    {        return parent::getData();    }    protected function loadFile()    {        if ($this->spreadsheet == null) {            if (!$this->checkProperty('filename')) {                return false;            }            $this->checkFileExists();            //$format = IOFactory::identify($this->filename);            //IOFactory::            //(new Debug())->write($format);            //exit;            $this->spreadsheet = IOFactory::load($this->filename);        }    }    protected function loadData()    {        $this->loadFile();        $this->clearList();        if ($this->spreadsheet !== null) {            $objWorksheet = null;            if ($this->sheetName == null) {                $objWorksheet = $this->spreadsheet->getActiveSheet();            } else {                if (!is_string($this->sheetName)) {                    $this->sheetName = strval($this->sheetName);                }                $objWorksheet = $this->spreadsheet->getSheetByName($this->sheetName);            }            if ($objWorksheet !== null) {                $highestRow = $objWorksheet->getHighestRow();                $highestColumn = $objWorksheet->getHighestColumn();                $highestColumnIndex = Coordinate::columnIndexFromString($highestColumn);                $count = 0;                for ($row = 1; $row <= $highestRow; $row++) {                    $item = [];                    for ($col = 1; $col <= $highestColumnIndex; $col++) {                        $value = $objWorksheet->getCellByColumnAndRow($col, $row)->getValue();                        if ($value !== null) {                            $value = trim($value);                        }                        $item[] = $value;                    }                    if ($count >= $this->lineOfStart) {                        if ($this->useFirstRowAsHeader) {                            if ($count == $this->lineOfStart) {                                $this->header = $item;                            } else {                                $itemNew = [];                                $rowCount = 0;                                foreach ($this->header as $rowHeader) {                                    $itemNew[$rowHeader] = $item[$rowCount];                                    $rowCount++;                                }                                $dataRow = new ExcelRow($itemNew);                                $this->addItem($dataRow);                            }                        } else {                            $dataRow = new ExcelRow($item);                            $this->addItem($dataRow);                        }                    }                    $count++;                }            }        }    }    public function getHeader()    {        $this->getData();        return $this->header;    }    public function getSheetList()    {        $this->loadFile();        $sheetList = $this->spreadsheet->getSheetNames();        return $sheetList;    }    public function setSheet($sheetName)    {        $this->sheetName = $sheetName;        $this->loadData();    }    public function getFileFormat()    {        $format = IOFactory::identify($this->filename);        return $format;    }}