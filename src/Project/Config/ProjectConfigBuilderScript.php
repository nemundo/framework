<?phpnamespace Nemundo\Project\Config;use Nemundo\App\Script\Type\AbstractScript;use Nemundo\Core\Config\ConfigFile;use Nemundo\Core\Console\ConsoleInput;use Nemundo\Core\File\File;use Nemundo\Project\Path\ProjectPath;use Nemundo\Project\ProjectConfig;class ProjectConfigBuilderScript extends AbstractScript{    private $configFilename;    public function run()    {        $this->configFilename = (new ProjectPath())            ->addPath('config.ini')            ->getFullFilename();        //ProjectConfig::$projectPath . 'config.ini';        $configFile = new File($this->configFilename);        if ($configFile->fileExists()) {            /*$config = new ProjectConfigWriter();            $config->filename = $configFilename;            $config->writeFile();*/            /*$config = new ProjectConfigBuilder();            $config->filename = $this->filename;*/            /*$input = new ConsoleInput();            $input->message = 'MySql Host';            $input->defaultValue = 'localhost';            $config->mysqlHost = $input->getValue();            $input = new ConsoleInput();            $input->message = 'MySql Port';            $input->defaultValue = 3306;            $config->mysqlPort = $input->getValue();            $input = new ConsoleInput();            $input->message = 'MySql User';            $input->defaultValue = 'root';            $config->mysqlUser = $input->getValue();            $input = new ConsoleInput();            $input->message = 'MySql Password';            $config->mysqlPassword = $input->getValue();*/            /*            =localhost=3306=root=mysql_database=dev         */            $this->changeValue( 'mysql_host','MySql Host',);            $this->changeValue( 'mysql_port','MySql Port');            $this->changeValue( 'mysql_user','MySql User');            $this->changeValue( 'mysql_password','MySql Password',);            $this->changeValue( 'mysql_database','MySql Database');            $config = new ProjectConfigReader();            $config->filename = ProjectConfig::$projectPath . 'config.ini';            $config->readFile();            /*$value = (new ProjectConfigReader())->getValue('test1');            $input = new ConsoleInput();            $input->message = 'MySql Database';            $input->defaultValue = $value;            $valueNew = $input->getValue();            if ($value!==$valueNew) {                //(new ProjectConfigWriter())->                $writer = new ConfigFile($configFilename);                $writer->setValue()            }*/            //(new Debug())->write($valueNewdatabaseNew);            /*            mysql_host=localhostmysql_port=3306mysql_user=rootmysql_password=mysql_database=devweb_url=/cache_path=D:\Cachetest1=jm5ocgyrWXcwig!4W7br*/            /*$config->mysqlDatabase = $input->getValue();            $input = new ConsoleInput();            $input->message = 'Web Url';            $input->defaultValue = '/';            $config->webUrl = $input->getValue();            $config->writeConfigFile();*/        } else {            $input = new ConsoleInput();            $input->message = 'Filename config.ini';            $input->defaultValue = $filename = getcwd() . DIRECTORY_SEPARATOR . 'config.ini';            $config = new ProjectConfigWriter();            $config->filename = $input->getValue();            $config->writeFile();            $config = new ProjectConfigReader();            $config->filename = ProjectConfig::$projectPath . 'config.ini';            $config->readFile();        }    }    private function changeValue($name, $message)    {        $writer = new ConfigFile($this->configFilename);        $value=$writer->getValue($name);        /*$reader = new ProjectConfigReader();        $reader->filename = $this->configFilename;        $value = $reader->getValue($name);*/        $input = new ConsoleInput();        $input->message = $message;        $input->defaultValue = $value;        $valueNew = $input->getValue();        if ($value !== $valueNew) {            $writer = new ConfigFile($this->configFilename);            $writer->setValue($name, $valueNew);            $writer->writeFile();        }    }}