<?phpnamespace Nemundo\Project\Config;use Nemundo\App\Script\Type\AbstractScript;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\Config\ConfigFile;use Nemundo\Core\Console\ConsoleInput;use Nemundo\Core\File\File;use Nemundo\Project\Path\ProjectPath;use Nemundo\Project\ProjectConfig;class ProjectConfigConsoleScript extends AbstractBase{    private $configFilename;    public function buildConfig()    {        $this->configFilename = getcwd() . DIRECTORY_SEPARATOR . 'config.ini';        /*$this->configFilename = (new ProjectPath())            ->addPath('config.ini')            ->getFullFilename();*/        $configFile = new File($this->configFilename);        if ($configFile->fileExists()) {            $this->changeValue( 'mysql_host','MySql Host');            $this->changeValue( 'mysql_port','MySql Port');            $this->changeValue( 'mysql_user','MySql User');            $this->changeValue( 'mysql_password','MySql Password');            $this->changeValue( 'mysql_database','MySql Database');            $config = new ProjectConfigReader();            $config->filename = ProjectConfig::$projectPath . 'config.ini';            $config->readFile();        } else {            $input = new ConsoleInput();            $input->message = 'Filename config.ini';            //$input->defaultValue = $filename = getcwd() . DIRECTORY_SEPARATOR . 'config.ini';            $input->defaultValue = $this->configFilename;  // getcwd() . DIRECTORY_SEPARATOR . 'config.ini';            $this->configFilename= $input->getValue();            /*$config = new ProjectConfigWriter();            $config->filename = $input->getValue();            $config->writeFile();*/            $config = new ProjectConfigBuilder();  // new ProjectConfigConsoleScript();            $config->filename = $this->configFilename;  //$this->filename;            $input = new ConsoleInput();            $input->message = 'MySql Host';            $input->defaultValue = 'localhost';            $config->mysqlHost = $input->getValue();            $input = new ConsoleInput();            $input->message = 'MySql Port';            $input->defaultValue = 3306;            $config->mysqlPort = $input->getValue();            $input = new ConsoleInput();            $input->message = 'MySql User';            $input->defaultValue = 'root';            $config->mysqlUser = $input->getValue();            $input = new ConsoleInput();            $input->message = 'MySql Password';            $config->mysqlPassword = $input->getValue();            $input = new ConsoleInput();            $input->message = 'MySql Database';            $input->defaultValue = 'test_project';            $config->mysqlDatabase = $input->getValue();            $input = new ConsoleInput();            $input->message = 'Web Url';            $input->defaultValue = '/';            $config->webUrl = $input->getValue();            $config->writeConfigFile();            $config = new ProjectConfigReader();            $config->filename = ProjectConfig::$projectPath . 'config.ini';            $config->readFile();        }    }    private function changeValue($name, $message)    {        $writer = new ConfigFile($this->configFilename);        $value=$writer->getValue($name);        $input = new ConsoleInput();        $input->message = $message;        $input->defaultValue = $value;        $valueNew = $input->getValue();        if ($value !== $valueNew) {            $writer = new ConfigFile($this->configFilename);            $writer->setValue($name, $valueNew);            $writer->writeFile();        }    }}