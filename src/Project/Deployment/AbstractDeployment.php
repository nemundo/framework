<?phpnamespace Nemundo\Project\Deployment;use Nemundo\App\Application\Copy\AppPackageCopy;use Nemundo\Com\Package\PackageSetup;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\Command\LocalCommand;use Nemundo\Core\Debug\Debug;use Nemundo\Core\File\DirectoryCopy;use Nemundo\Core\File\FileCopy;use Nemundo\Core\Path\Path;use Nemundo\Core\TextFile\Writer\TextFileWriter;use Nemundo\Dev\Code\PhpFile;use Nemundo\Dev\Deployment\ProjectDeployment;use Nemundo\Dev\ProjectBuilder\Copy\AssetCopy;use Nemundo\Project\AbstractProject;use Nemundo\Project\Config\ConfigFileBuilder;abstract class AbstractDeployment extends AbstractBase{    /**     * @var AbstractProject     */    public $project;    protected $deploymentPath;    public $webPath = 'web';    /**     * @var bool     */    public $copySource = true;    /**     * @var bool     */    public $copyPackage = true;    /**     * @var bool     */    public $copyHtmlIndex = false;    public $copyPhpIndex = true;    public $phpIndexFilename = 'index.php';    public $jsIndexFilename;    public $htmlIndexFilename;    /**     * @var bool     */    //public $copyManifest = false;    public $manifestFilename;    /**     * @var bool     */    //public $copyServiceWorker = false;    //public $serviceWorkerFilename = 'serviceworker.js';    /**     * @var bool     */    protected $createConfigFile = true;    /**     * @var ConfigFileBuilder     */    protected $configFileBuilder = false;    /**     * @var bool     */    public $deleteBeforeDeploy = true;    abstract protected function loadDeployment();    public function __construct()    {        $this->configFileBuilder = new ConfigFileBuilder();        $this->loadDeployment();    }    public function getDeploymentPath()    {        $path = new Path($this->deploymentPath);        return $path;    }    // deployProject    public function deploy()    {        $path = (new Path($this->deploymentPath))->createPath();        /*if ($this->deleteBeforeDeploy) {            //(new Path($this->deploymentPath))->emptyDirectory();            $reader = new DirectoryReader();            $reader->path = $this->deploymentPath;            $reader->includeDirectories = true;            $reader->includeFiles = true;            foreach ($reader->getData() as $file) {                if ($file->isDirectory()) {                    if (($file->getFilename() !== '.git') && ($file->getFilename() !== '.idea')) {                        (new Path($file->getFullFilename()))->deleteDirectory();                    }                }                if ($file->isFile()) {                    if ($file->getFilename() !== 'config.ini') {                        $file->deleteFile();                    }                }            }        }*/        $webPath = (new Path($this->deploymentPath))            ->addPath($this->webPath)            ->createPath()            ->getPath();        (new Debug())->write($webPath);        $copy = new AppPackageCopy();        $copy->destinationPath = $webPath;        $copy->copyPackage();        //exit;        /*if ($this->copyPackage) {            foreach ($this->project->getApplicationList() as $application) {                foreach ($application->getPackageList() as $package) {                    (new Debug())->write('Copy: '.$package->getClassName());                    $setup = new \Nemundo\Com\Package\Setup\PackageSetup();  // new PackageSetup();                    $setup->destinationPath = $webPath;                    $setup->addPackage($package);                }            }        }*/        $this->copyFile('js', $this->webPath);        $this->copyFile('css', $this->webPath);        $this->copyFile('img', $this->webPath);        //$this->copyFile('asset', $this->webPath);        $this->copyFile('source', '');        //$this->copyFile('web', $this->webPath);        $path = (new Path(DeploymentConfig::$devPath))            ->addPath('web')            ->addPath($this->project->projectName);        $webPath = (new Path($this->deploymentPath))            ->addPath($this->webPath)            ->getPath();        if ($path->existPath()) {            //(new Debug())->write('exists');            $copy = new DirectoryCopy();            $copy->overwriteExistingFile = true;            $copy->sourcePath = $path->getPath();            $copy->destinationPath = $webPath;            $copy->copyDirectory();        }        /*(new Debug())->write($path->getPath());        (new Debug())->write($this->webPath);*/        //exit;        $composerList = [];        /** @var AbstractProject $project */        foreach ($this->project->getDependencyList() as $project) {            foreach ($project->getComposerList() as $composerLibrary) {                $composerList[] = $composerLibrary;            }        }        $composerList = array_unique($composerList);        $configFilename = (new Path($this->deploymentPath))            ->addPath('autoload.php')            ->getFullFilename();        $php = new PhpFile($configFilename);        $php->overwriteExistingFile = true;        $php->add('function autoloader($class) {');        $php->add('$class = str_replace(chr(92), DIRECTORY_SEPARATOR, $class);');        $php->add('include "src" . DIRECTORY_SEPARATOR . $class . ".php";');        $php->add('}');        $php->add('spl_autoload_register("autoloader");');        $php->writeFile();        $configFilename = (new Path($this->deploymentPath))            ->addPath('config.php')            ->getFullFilename();        $php = new PhpFile($configFilename);        $php->overwriteExistingFile = true;        if (sizeof($composerList) > 0) {            $php->add('require_once "vendor/autoload.php";');        }        $php->add('require_once "autoload.php";');        $php->add('\Nemundo\Project\ProjectConfig::$projectPath = __DIR__ . DIRECTORY_SEPARATOR;');        $php->add('(new \Nemundo\Project\Loader\MySqlProjectLoader())->loadProject();');        $php->add('\Nemundo\Web\WebConfig::$webPath = \Nemundo\Project\ProjectConfig::$projectPath . "' . $this->webPath . '" . DIRECTORY_SEPARATOR;');        $php->writeFile();        if ($this->copyPhpIndex) {            $php = new PhpFile($webPath . $this->phpIndexFilename);            $php->overwriteExistingFile = true;            $php->add('ini_set("display_errors", 1);');            $php->add('error_reporting(E_ALL);');            $php->add('require "../config.php";');            $php->add('(new \\' . $this->project->webClass . '())->loadWeb();');            $php->writeFile();        }        if ($this->copyHtmlIndex) {            $copy = new FileCopy();            //$copy->sourceFilename = $this->htmlIndexFilename;            $copy->sourceFilename = (new Path(DeploymentConfig::$devPath))                ->addPath('web')                ->addPath($this->project->projectName)                ->addPath('index.html')                ->getFullFilename();            $copy->destinationFilename = (new Path($webPath))                ->addPath('index.html')                ->getFullFilename();            $copy->copyFile();            /*(new Debug())->write($copy);            exit;*/            /*$copy = new FileCopy();            $copy->sourceFilename = $this->jsIndexFilename;            $copy->destinationFilename = (new Path($webPath))                ->addPath('index.js')                ->getFullFilename();            $copy->copyFile();*/        }        //if ($this->manifestFilename !== null) {        /*if ($this->copyManifest) {            $copy = new FileCopy();            $copy->sourceFilename = $this->manifestFilename;            $copy->destinationFilename = (new Path($webPath))                ->addPath('manifest.json')                ->getFullFilename();            $copy->copyFile();        }*/        //}        //if ($this->copyServiceWorker) {        //if ($this->serviceWorkerFilename !== null) {        /* $copy = new FileCopy();         $copy->overwriteExistingFile=true;         $copy->sourceFilename = $this->serviceWorkerFilename;         $copy->destinationFilename = (new Path($webPath))             ->addPath('serviceworker.js')             ->getFullFilename();         $copy->copyFile();*/        /*$filename = (new Path($webPath))            ->addPath($this->serviceWorkerFilename)            ->getFullFilename();        //"/index.html"        $file = new TextFileWriter($filename);        $file->overwriteExistingFile = true;        $file->addLine('self.addEventListener("install", function(e) {e.waitUntil(    caches.open("pwa-example").then(function(cache) {        return cache.addAll([        "app.html"        ]);    }));});self.addEventListener("fetch", function(event) {event.respondWith(    caches.match(event.request).then(function(response) {        return response || fetch(event.request);    }));});');        $file->writeFile();        //}    }*/        $php = new TextFileWriter($webPath . '.htaccess');        $php->overwriteExistingFile = true;        $php->addLine('RewriteEngine on');        $php->addLine('RewriteCond %{REQUEST_FILENAME} !-f');        $php->addLine('RewriteCond %{REQUEST_URI} !/$');        //$index->addLine('RewriteRule  ^(.*) redirect.php [L]');        $php->addLine('RewriteRule ^(.*) ' . $this->phpIndexFilename . ' [L]');        /*$index->addLine('php_value post_max_size 2000M');        $index->addLine('php_value upload_max_filesize 2000M');*/        $php->writeFile();        $setupFilename = (new Path($this->deploymentPath))            ->addPath('bin')            ->createPath()            ->addPath('setup.php')            ->getFullFilename();        $php = new PhpFile($setupFilename);        $php->overwriteExistingFile = true;        $php->add('require_once "config.php";');        $php->add('(new \\' . $this->project->setupClass . '())->run();');        $php->writeFile();        if ($this->copySource) {            foreach ($this->project->getDependencyList() as $project) {                $projectDeployment = new ProjectDeployment();                $projectDeployment->path = new Path($this->deploymentPath);                $projectDeployment->copyProject($project);            }        }        $copy = new AssetCopy();        $copy->destinationPath = $this->deploymentPath;        $copy            ->copyAsset('bin/config.php')            ->copyAsset('bin/clean.php')            ->copyAsset('bin/cmd.php')            ->copyAsset('bin/init.php')            ->copyAsset('commit.bat');        /*$filename = $this->getDeploymentPath()->addPath('.gitignore')->getFullFilename();        $file = new TextFileWriter($filename);        $file->addLine('/.idea');        $file->addLine('/config.ini');        $file->addLine('/log');        $file->addLine('/tmp');        $file->addLine('/data_redirect');        $file->addLine('/web/data');        $file->addLine('/web/tmp');        $file->addLine('/web/log');        $file->writeFile();*/        $filename = $this->getDeploymentPath()->addPath('deploy')->getFullFilename();        $file = new TextFileWriter($filename);        $file->overwriteExistingFile = true;        //$file->addLine('git config credential.helper store');        $file            ->addLine('git pull')            ->addLine('php bin/composer.phar update')            ->addLine('php bin/setup.php');        //$file->addLine('/usr/local/php81/bin/php bin/setup.php');        /*$file->addLine('sudo chown -R www-data:www-data web/data');        $file->addLine('sudo chown -R www-data:www-data web/tmp');        $file->addLine('sudo chown -R www-data:www-data tmp');        $file->addLine('sudo chown -R www-data:www-data log');        $file->addLine('sudo chown -R www-data:www-data data_redirect');*/        $file->writeFile();        /*$filename = $this->getDeploymentPath()->addPath('install')->getFullFilename();        $file = new TextFileWriter($filename);        $file->overwriteExistingFile = true;        /** @var AbstractProject $project */        /*foreach ($this->project->getDependencyList() as $project) {            if ($project->isObjectOfClass(AbstractProject::class)) {                if ($project->hasSetupCommand()) {                    $file->addLine($project->getSetupCommand()->getCmdText());                }            }        }        $file->writeFile();        if ($this->createConfigFile) {            //$this->configFileBuilder->writeFile();        }*/        //$filename = (new Path($this->deploymentPath))->addPath('start.bat')->getFullFilename();        /*$random = new RandomNumber();        $random->minNumber = 40000;        $random->maxNumber = 50000;        $port = $random->getNumber();        $file = new TextFileWriter($filename);        $file->addLine('start http://localhost:' . $port);        $file->addLine('cd ' . $this->webPath);        $file->addLine('php -S localhost:' . $port);        $file->writeFile();*/        $cmd = new LocalCommand();  // new LocalCommand();        $cmd->showOutput = true;        $cmd->addCommandLine('cd /d ' . $this->deploymentPath);        foreach ($composerList as $composer) {            $cmd->addCommandLine('composer require ' . $composer);        }        $cmd->runCommand();        $this->onDeploy();    }    public function copyFile($type, $destinationPath)    {        /** @var AbstractProject $project */        foreach ($this->project->getDependencyList() as $project) {            $path = (new Path(DeploymentConfig::$devPath))                ->addPath('package')                ->addPath($type)                ->addPath($project->projectName);            $webPath = (new Path($this->deploymentPath))                ->addPath($destinationPath)                ->createPath()                ->getPath();            if ($path->existPath()) {                $copy = new DirectoryCopy();                $copy->overwriteExistingFile = true;                $copy->sourcePath = $path->getPath();                $copy->destinationPath = (new Path($webPath))                    ->addPath('package')                    ->addPath($type)                    ->addPath($project->projectName)                    ->createPath()                    ->getPath();                $copy->copyDirectory();            }        }    }    protected function onDeploy()    {    }}