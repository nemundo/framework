<?phpnamespace Nemundo\User\Builder;use Nemundo\App\Mail\MailConfig;use Nemundo\App\Mail\Message\Mail\ActionMailMessage;use Nemundo\App\UserAction\Site\UserActivationSite;use Nemundo\App\UserAdmin\UserAdminConfig;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Random\UniqueId;use Nemundo\Core\Type\Text\Text;use Nemundo\User\Data\User\User;use Nemundo\User\Data\User\UserCount;use Nemundo\User\Data\User\UserDelete;use Nemundo\User\Data\User\UserId;use Nemundo\User\Data\User\UserReader;use Nemundo\User\Data\User\UserUpdate;use Nemundo\User\Data\Usergroup\UsergroupCount;use Nemundo\User\Data\Usergroup\UsergroupReader;use Nemundo\User\Data\UserUsergroup\UserUsergroup;use Nemundo\User\Data\UserUsergroup\UserUsergroupCount;use Nemundo\User\Data\UserUsergroup\UserUsergroupDelete;use Nemundo\User\Mail\AbstractUserLoginMailContainer;use Nemundo\User\Mail\UserLoginMailContainer;use Nemundo\User\Parameter\SecureTokenParameter;use Nemundo\User\Password\PasswordChange;use Nemundo\User\Usergroup\AbstractUsergroup;use Nemundo\User\Usergroup\Usergroup;class UserBuilder extends AbstractUserBuilder{    /**     * @var bool     */    public $active = true;    /**     * @var string     */    public $login;    /**     * @var string     */    public $password;    /**     * @var string     */    public $displayName;    /**     * @var string     */    public $email;    public function createUser()    {        $this->email = (new Text($this->email))->changeToLowercase()->getValue();        $login = $this->login;        if ($login === null) {            $login = $this->email;        }        $displayName = $this->displayName;        if ($displayName === null) {            $displayName = $login;        }        $count = new UserCount();        $count->filter->andEqual($count->model->login, $login);        if ($count->getCount() == 0) {            $data = new User();            $data->active = $this->active;            $data->login = $login;            $data->email = $this->email;            $data->displayName = $displayName;            $data->secureToken = (new UniqueId())->getUniqueId();            $this->userId = $data->save();        } else {            $id = new UserId();            $id->filter->andEqual($id->model->login, $login);            $this->userId = $id->getId();            $update = new UserUpdate();            $update->active = $this->active;            $update->displayName = $this->displayName;            $update->updateById($this->userId);        }        if ($this->password !== null) {            (new PasswordChange($this->userId))->changePassword($this->password);        }        return $this->userId;    }    public function addUsergroup(AbstractUsergroup $usergroup)    {        $this->addUsergroupId($usergroup->usergroupId);        return $this;    }    public function addUsergroupId($usergroupId)    {        $count = new UsergroupCount();        $count->filter->andEqual($count->model->id, $usergroupId);        if ($count->getCount() == 1) {            $count = new UserUsergroupCount();            $count->filter->andEqual($count->model->userId, $this->userId);            $count->filter->andEqual($count->model->usergroupId, $usergroupId);            if ($count->getCount() == 0) {                $data = new UserUsergroup();                $data->userId = $this->userId;                $data->usergroupId = $usergroupId;                $data->save();            }        } else {            (new LogMessage())->writeError('Usergroup does not exist. Usergroup Id: ' . $usergroupId);        }        return $this;    }    public function addAllUsergroup()    {        $usergroupReader = new UsergroupReader();        foreach ($usergroupReader->getData() as $usergroupRow) {            $usergroup = new Usergroup();            $usergroup->usergroupId = $usergroupRow->id;            $this->addUsergroup($usergroup);        }    }    public function removeUsergroup(AbstractUsergroup $usergroup)    {        $delete = new UserUsergroupDelete();        $delete->filter->andEqual($delete->model->userId, $this->userId);        $delete->filter->andEqual($delete->model->usergroupId, $usergroup->usergroupId);        $delete->delete();        return $this;    }    public function removeAllUsergroup()    {        $delete = new UserUsergroupDelete();        $delete->filter->andEqual($delete->model->userId, $this->userId);        $delete->delete();        return $this;    }    public function disableUser()    {        $update = new UserUpdate();        $update->active = false;        $update->updateById($this->userId);    }    public function enableUser()    {        $update = new UserUpdate();        $update->active = true;        $update->updateById($this->userId);    }    public function deleteUser()    {        $delete = new UserUsergroupDelete();        $delete->filter->andEqual($delete->model->userId, $this->userId);        $delete->delete();        (new UserDelete())->deleteById($this->userId);        return $this;    }    public function sendMail(AbstractUserLoginMailContainer $mailContainer = null)    {        if ($mailContainer == null) {            $mailContainer = UserAdminConfig::$mailTemplate;            if (UserAdminConfig::$mailTemplate == null) {                $mailContainer = new UserLoginMailContainer();            }        }        $mailContainer->userId = $this->userId;        $userRow = (new UserReader())->getRowById($this->userId);        $site = clone(UserActivationSite::$site);        $site->addParameter(new SecureTokenParameter($userRow->secureToken));        //$message = new MailMessage();        //$inlineImage = new InlineImageAttachment();        $document = (new MailConfig())->getActionMailDocument();        /*if ($document->logoInlineImage !== null) {            $message->addInlineImage($document->logoInlineImage);        }*/        $document->mailTitle = $mailContainer->subject;        $document->mailDiv->addContainer($mailContainer);        /*$inlineImage->filename = (new SourcePath())            ->addPath('mail')            ->addPath('logo.png')            ->getFullFilename();*/        //if ($document->mailText == null) {        //$document->mailText = 'You got a login for the this website.';        //}        $document->actionSite = $site;        $message = new ActionMailMessage();  // new MailMessage();        $message->mailTo = $this->email;        $message->subject = $mailContainer->subject;        $message->mailContainer = $document;  //->getHtml();        $message->sendMail();    }}