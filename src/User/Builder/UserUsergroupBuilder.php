<?phpnamespace Nemundo\User\Builder;use Nemundo\Core\Log\LogMessage;use Nemundo\User\Data\Usergroup\UsergroupCount;use Nemundo\User\Data\Usergroup\UsergroupReader;use Nemundo\User\Data\UserUsergroup\UserUsergroup;use Nemundo\User\Data\UserUsergroup\UserUsergroupCount;use Nemundo\User\Data\UserUsergroup\UserUsergroupDelete;use Nemundo\User\Usergroup\AbstractUsergroup;use Nemundo\User\Usergroup\Usergroup;class UserUsergroupBuilder extends AbstractUserBuilder{    public function addUsergroup(AbstractUsergroup $usergroup)    {        $this->addUsergroupId($usergroup->usergroupId);        return $this;    }    public function addUsergroupId($usergroupId)    {        $count = new UsergroupCount();        $count->filter->andEqual($count->model->id, $usergroupId);        if ($count->getCount() == 1) {            $count = new UserUsergroupCount();            $count->filter->andEqual($count->model->userId, $this->userId);            $count->filter->andEqual($count->model->usergroupId, $usergroupId);            if ($count->getCount() == 0) {                $data = new UserUsergroup();                $data->userId = $this->userId;                $data->usergroupId = $usergroupId;                $data->save();            }        } else {            (new LogMessage())->writeError('Usergroup does not exist. Usergroup Id: ' . $usergroupId);        }        return $this;    }    public function addAllUsergroup()    {        $usergroupReader = new UsergroupReader();        foreach ($usergroupReader->getData() as $usergroupRow) {            $usergroup = new Usergroup();            $usergroup->usergroupId = $usergroupRow->id;            $this->addUsergroup($usergroup);        }    }    public function removeUsergroup(AbstractUsergroup $usergroup)    {        $delete = new UserUsergroupDelete();        $delete->filter->andEqual($delete->model->userId, $this->userId);        $delete->filter->andEqual($delete->model->usergroupId, $usergroup->usergroupId);        $delete->delete();        return $this;    }    public function removeAllUsergroup()    {        $delete = new UserUsergroupDelete();        $delete->filter->andEqual($delete->model->userId, $this->userId);        $delete->delete();        return $this;    }}