<?phpnamespace Nemundo\Web\Site;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Http\Domain\DomainInformation;use Nemundo\Core\Http\Url\UrlRedirect;use Nemundo\Core\Language\LanguageConfig;use Nemundo\User\Access\UserRestrictionTrait;use Nemundo\Web\Parameter\AbstractUrlParameter;use Nemundo\Web\Url\UrlParameterBuilder;use Nemundo\Web\WebConfig;abstract class AbstractSite extends AbstractSiteTree{    use UserRestrictionTrait;    /**     * @var string|string[]     */    public $title;    // siteTitle    /**     * @var string     */    public $url;    /**     * @var string     */    public $anchor;    /**     * @var bool     */    public $active = true;    /**     * @var bool     */    public $menuActive = true;    /**     * @var bool     */    public $showMenuAsActive = false;    /**     * @var AbstractUrlParameter[]     */    private $parameterList = [];    /**     * @var string     */    //protected $parentUrl;    public $parentUrl;    /**     * @var bool     */    private $baseUrl = false;    abstract protected function loadSite();    abstract public function loadContent();    public function __construct(AbstractSiteTree $site = null)    {        if ($site !== null) {            $site->addSite($this);            $this->parentUrl = $site->getUrl();            if (LanguageConfig::$multiLanguage) {                //(new Debug())->write(LanguageConfig::$currentLanguageCode);                if ($this->parentUrl==='/') {                $this->parentUrl = WebConfig::$webUrl . LanguageConfig::$currentLanguageCode . '/';                }                //(new Debug())->write($this->parentUrl);            }        } else {            //$this->baseUrl=true;            $this->parentUrl = WebConfig::$webUrl;            //(new Debug())->write('NULL'.$this->url);        }        $this->loadSite();    }    public function isMenuVisible()    {        $visible = false;        if ($this->menuActive) {            $visible = $this->checkUserVisibility();        }        return $visible;    }    public function isCurrentSite()    {        $returnValue = false;        if ((new UrlParameterBuilder())->getUrlWithoutParameter() == $this->getUrlWithoutParameter()) {            $returnValue = true;        }        if ($this->showMenuAsActive) {            $returnValue = true;        }        return $returnValue;    }    public function addParameter(AbstractUrlParameter $parameter)    {        $found = false;        // Problem mit MultipleParameter        if ($parameter->isObjectOfClass(AbstractUrlParameter::class)) {            foreach ($this->parameterList as $key => $value) {                if ($value->getParameterName() == $parameter->getParameterName()) {                    $this->parameterList[$key] = $parameter;                    $found = true;                }            }        }        if (!$found) {            $this->parameterList[] = $parameter;        }        return $this;    }    public function removeParameter(AbstractUrlParameter $parameter)    {        foreach ($this->parameterList as $key => $value) {            if ($parameter->getParameterName() == $value->getParameterName()) {                unset($this->parameterList[$key]);            }        }        return $this;    }    public function getUrl()    {        $url = $this->getUrlWithoutParameter();        $urlParameter = [];        foreach ($this->parameterList as $parameter) {            $value = $parameter->getUrl();            if ($value !== '') {                $urlParameter[] = $value;            }        }        if (sizeof($urlParameter) > 0) {            $url .= '?' . implode('&', $urlParameter);        }        if ($this->anchor !== null) {            $url .= '#' . $this->anchor;        }        return $url;    }    public function getUrlWithoutParameter()    {        $url = $this->parentUrl . '/' . $this->url;        //$url = WebConfig::$webUrl. $this->parentUrl . '/' . $this->url;        if (LanguageConfig::$multiLanguage) {            //$url = WebConfig::$webUrl. LanguageConfig::$currentLanguageCode.$url;            /*(new Debug())->write($site->parentUrl);            $site->parentUrl = WebConfig::$webUrl. LanguageConfig::$currentLanguageCode.$site->parentUrl;            (new Debug())->write($site->parentUrl);            if ($site->parentUrl === WebConfig::$webUrl) {                //$site->parentUrl = WebConfig::$webUrl. LanguageConfig::$currentLanguageCode.$site->parentUrl;            } else {                //  $site->parentUrl = LanguageConfig::$currentLanguageCode.$site->parentUrl;                //$site->parentUrl = $site->parentUrl;            }*/            //$site->parentUrl = WebConfig::$webUrl. $site->parentUrl;            //(new Debug())->write($site->parentUrl);        }        $url = str_replace('//', '/', $url);        return $url;    }// getFullUrl    public function getUrlWithDomain()    {        $domain = new DomainInformation();        $url = $domain->getDomain() . $this->getUrl();        return $url;    }    public function redirect()    {        (new UrlRedirect())->redirect($this->getUrl());    }    public function render()    {        $this->loadContent();    }}