<?phpnamespace Nemundo\Model\Data\Property\Image;use Dev\App\Wetzikon\Data\Poi2\Poi2;use Nemundo\Core\Debug\Debug;use Nemundo\Core\File\File;use Nemundo\Core\File\UniqueFilename;use Nemundo\Core\Http\Request\File\AbstractFileRequest;use Nemundo\Core\Image\Cropping\CroppingDimension;use Nemundo\Core\Image\Cropping\ImageCropping;use Nemundo\Core\Image\Cropping\MaxImageCropping;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Path\Path;use Nemundo\Model\Data\Property\AbstractDataProperty;use Nemundo\Model\Data\Property\File\FileDataProperty;use Nemundo\Model\Type\File\CroppingImageType;use Nemundo\Project\Path\TmpPath;class CroppingImageDataProperty extends AbstractDataProperty  // FileDataProperty{    /**     * @var CroppingImageType     */    protected $type;    /*public function setValue(CroppingDimension $croppingDimension = null)    {        if ($croppingDimension !== null) {            //$this->typeValueList->setModelValue($this->type->)            $this->typeValueList->setModelValue($this->type->x, $croppingDimension->x);            $this->typeValueList->setModelValue($this->type->y, $croppingDimension->y);            $this->typeValueList->setModelValue($this->type->width, $croppingDimension->width);            $this->typeValueList->setModelValue($this->type->heigth, $croppingDimension->height);        }        return $this;    }*/    /*public function fromFileRequest(AbstractFileRequest $fileRequest)    {        //$filename = parent::fromFileRequest($fileRequest);        //new FileDataProperty()        //$path = $this->type->getDataPath();        $filename = $fileRequest->saveAsUniqueFilename((new TmpPath())->getFullFilename());        //$filename = basename($fullFilename);        $this->saveImageCropping($filename);        $fullFilename = null;       /* if ($filename !== null) {            $file = new File($filename);            if ($file->fileExists()) {                $fileExtension = $file->getFileExtension();                $uniqueFilename = (new UniqueFilename())->getUniqueFilename($fileExtension);                if ($this->type->keepOrginalFilename) {                    $uniqueFilename = $file->filename;                }                $fullFilename = $this->type->getDataPath() . $uniqueFilename;                $file->saveAs($fullFilename);                $this->typeValueList->setModelValue($this->type, $uniqueFilename);            } else {                (new LogMessage())->writeError('File existiert nicht. ' . $filename);            }        }        //return $fullFilename;        $this->saveImageCropping($filename);*/    /*}    public function fromFilename($filename)    {        //$this->type->image->fr        //$fullFilename = parent::fromFilename($filename);        $this->saveImageCropping($filename);        /*$croppingDimension = new MaxImageCropping($filename);        $croppingDimension->aspectRatioWidth = $this->type->aspectRatioX;        $croppingDimension->aspectRatioHeight = $this->type->aspectRatioY;        $this->setValue($croppingDimension->getCroppingDimension());*/        //return $fullFilename;    // TODO: Change the autogenerated stub    //}    public function saveOrginalFile($filename) {        //$this->typeValueList->setModelValue($this->type->orginalImage, $filename);        $image = new FileDataProperty($this->type->orginalImage, $this->typeValueList);        $image->fromFilename($filename);        return $this;    }    public function saveCroppingFile($filename) {        $image = new FileDataProperty($this->type->croppingImage, $this->typeValueList);        $image->fromFilename($filename);        return $this;    }    public function saveCroppingDimension(CroppingDimension $croppingDimension)    {        //$file = new File($filename);        //if ($file->fileExists()) {          /*  $fileExtension = $file->getFileExtension();            $uniqueFilename = (new UniqueFilename())->getUniqueFilename($fileExtension);            /*if ($this->type->keepOrginalFilename) {                $uniqueFilename = $file->filename;            }*/          /*  $fullFilename = $this->type->getDataPath() . $uniqueFilename;        //(new Debug())->write($fullFilename);            $file->saveAs($fullFilename);            $this->typeValueList->setModelValue($this->type->image, $uniqueFilename);        /*} else {            (new LogMessage())->writeError('File existiert nicht. ' . $filename);        }*/        /*$cropping = new MaxImageCropping($filename);        $cropping->aspectRatioWidth = $this->type->aspectRatioX;        $cropping->aspectRatioHeight = $this->type->aspectRatioY;        //$this->setValue($croppingDimension->getCroppingDimension());        $croppingDimension= $cropping->getCroppingDimension();        $cropping=new ImageCropping();        $cropping->sourceFilename= $fullFilename;        $cropping->destinationFilename= (new Path( $this->type->getDataPath()))        ->addPath('cropping')            ->addPath($uniqueFilename)            ->getFullFilename();        $cropping->croppingDimension=$croppingDimension;        $cropping->cropImage();*/        $this->typeValueList->setModelValue($this->type->x, $croppingDimension->x);        $this->typeValueList->setModelValue($this->type->y, $croppingDimension->y);        $this->typeValueList->setModelValue($this->type->width, $croppingDimension->width);        $this->typeValueList->setModelValue($this->type->heigth, $croppingDimension->height);        return $this;    }}