<?phpnamespace Nemundo\App\SystemLog\Install;use Nemundo\App\Application\Type\Install\AbstractInstall;use Nemundo\App\Scheduler\Setup\SchedulerSetup;use Nemundo\App\Script\Setup\ScriptSetup;use Nemundo\App\SystemLog\Application\SystemLogApplication;use Nemundo\App\SystemLog\Data\LogType\LogType;use Nemundo\App\SystemLog\Data\SystemLogModelCollection;use Nemundo\App\SystemLog\Scheduler\SystemLogMailScheduler;use Nemundo\App\SystemLog\Script\MessageScript;use Nemundo\App\SystemLog\Script\SystemLogCleanScript;use Nemundo\App\SystemLog\Type\AbstractLogType;use Nemundo\App\SystemLog\Type\ErrorLogType;use Nemundo\App\SystemLog\Type\InformationLogType;use Nemundo\App\SystemLog\Type\WarningLogType;use Nemundo\App\SystemLog\Usergroup\SystemLogUsergroup;use Nemundo\Model\Setup\ModelCollectionSetup;use Nemundo\User\Setup\UsergroupSetup;class SystemLogInstall extends AbstractInstall{    public function install()    {        (new ModelCollectionSetup())            ->addCollection(new SystemLogModelCollection());        $this            ->addLogType(new InformationLogType())            ->addLogType(new WarningLogType())            ->addLogType(new ErrorLogType());        (new UsergroupSetup())            ->addUsergroup(new SystemLogUsergroup());        (new SchedulerSetup(new SystemLogApplication()))            ->addScheduler(new SystemLogMailScheduler())            ->addScheduler(new SystemLogMailScheduler());        (new ScriptSetup(new SystemLogApplication()))            ->addScript(new MessageScript())            ->addScript(new SystemLogCleanScript());    }    private function addLogType(AbstractLogType $logType)    {        $data = new LogType();        $data->updateOnDuplicate = true;        $data->id = $logType->id;        $data->logType = $logType->logType;        $data->save();        return $this;    }}