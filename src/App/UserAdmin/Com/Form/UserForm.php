<?phpnamespace Nemundo\App\UserAdmin\Com\Form;use Nemundo\Admin\Com\Form\AbstractAdminForm;use Nemundo\Admin\Com\ListBox\AdminCheckBox;use Nemundo\Admin\Com\ListBox\AdminTextBox;use Nemundo\App\UserAdmin\UserAdminConfig;use Nemundo\Core\Http\Request\Post\PostRequest;use Nemundo\Core\Validation\ValidationType;use Nemundo\Html\Block\Div;use Nemundo\Html\Formatting\Bold;use Nemundo\Html\Inline\Span;use Nemundo\User\Builder\UserBuilder;use Nemundo\User\Data\User\UserModel;use Nemundo\User\Data\User\UserReader;use Nemundo\User\Data\User\UserUpdate;use Nemundo\User\Data\Usergroup\UsergroupReader;use Nemundo\User\Data\UserUsergroup\UserUsergroupCount;use Nemundo\User\Data\UserUsergroup\UserUsergroupDelete;use Nemundo\User\Data\UserUsergroup\UserUsergroupUpdate;use Nemundo\User\Reader\Usergroup\UsergroupDataReader;use Nemundo\User\Usergroup\Usergroup;class UserForm extends AbstractAdminForm{    /**     * @var string     */    public $userId;    /**     * @var AdminCheckBox     */    private $active;    /**     * @var AdminTextBox     */    private $login;    /**     * @var AdminTextBox     */    private $eMail;    /**     * @var AdminTextBox     */    private $displayName;    public function getContent()    {        $model = new UserModel();        $this->active = new AdminCheckBox($this);        $this->active->label = 'Active';        $this->active->value = true;        /*$this->login = new AdminTextBox($this);        $this->login->name = 'login';        $this->login->label = 'Login';*/        $this->displayName = new AdminTextBox($this);        $this->displayName->label = $model->displayName->label;        if ($this->userId == null) {            $this->eMail = new AdminTextBox($this);            $this->eMail->label = 'eMail';            $this->eMail->validation = true;            //$this->eMail->validationType = ValidationType::IS_EMAIL;            /*$this->login->autofocus = true;            $this->login->validation = true;*/        } else {            $userRow = (new UserReader())->getRowById($this->userId);            // Problem bei Submit !!!            //$this->login->disabled = true;            $this->active->value = $userRow->active;            //$this->login->value = $userRow->login;            //$this->eMail->value = $userRow->email;            $div = new Div($this);            $user = new Bold($div);            $user->content = $userRow->login;            $div = new Div($this);            $user = new Span($div);  // new Bold($div);            $user->content = $userRow->email;            $this->displayName->value = $userRow->displayName;        }        $usergroupReader = new UsergroupDataReader();        foreach ($usergroupReader->getData() as $usergroupRow) {            $checkbox = new AdminCheckBox($this);            $checkbox->name = 'usergroup_' . $usergroupRow->id;            $checkbox->label = $usergroupRow->usergroup;            $checkbox->value = false;            if ($this->userId !== null) {                $count = new UserUsergroupCount();                $count->filter->andEqual($count->model->userId, $this->userId);                $count->filter->andEqual($count->model->usergroupId, $usergroupRow->id);                if ($count->getCount() == 1) {                    $checkbox->value = true;                }            }        }        return parent::getContent();    }    public function onSubmit()    {        $sendMail = false;        if ($this->userId == null) {            $email = $this->eMail->getValue();            $sendMail = true;            $user = new UserBuilder();            $user->active = $this->active->getValue();            $user->login = $email;            $user->email = $email;            $user->displayName = $this->displayName->getValue();            $this->userId = $user->createUser();        } else {            $update = new UserUpdate();            $update->active = $this->active->getValue();            $update->displayName = $this->displayName->getValue();            $update->updateById($this->userId);        }        //        $user = new UserBuilder($this->userId);        //$user->removeAllUsergroup();        $update = new UserUsergroupUpdate();        $update->importStatus = false;        $update->filter->andEqual($update->model->userId, $this->userId);        $update->update();        $usergroupReader = new UsergroupReader();        foreach ($usergroupReader->getData() as $usergroupRow) {            $name = 'usergroup_' . $usergroupRow->id;            $parameter = new PostRequest($name);            if ($parameter->getValue() == '1') {                $usergroup = new Usergroup();                $usergroup->usergroupId = $usergroupRow->id;                $user->addUsergroup($usergroup);            }        }        $delete = new UserUsergroupDelete();        $delete->filter->andEqual($update->model->userId, $this->userId);        $delete->filter->andEqual($update->model->importStatus, false);        $delete->delete();        if ($sendMail) {            $user->sendMail(UserAdminConfig::$mailTemplate);        }    }}