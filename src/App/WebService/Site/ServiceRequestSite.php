<?phpnamespace Nemundo\App\WebService\Site;use Nemundo\App\WebService\Data\ServiceRequest\ServiceRequestReader;use Nemundo\App\WebService\Service\AbstractServiceRequest;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Http\Request\HttpRequest;use Nemundo\Core\Http\Response\HttpResponse;use Nemundo\Core\Http\Response\StatusCode;use Nemundo\User\Session\UserSession;use Nemundo\Web\Site\AbstractSite;class ServiceRequestSite extends AbstractSite{    /**     * @var ServiceRequestSite     */    public static $site;    protected function loadSite()    {        $this->title = 'Service Request';        $this->url = 'service-request';        $this->menuActive = false;        ServiceRequestSite::$site = $this;    }    public function loadContent()    {        $found = false;        $serviceName = (new HttpRequest('service'))->getValue();        $reader = new ServiceRequestReader();        $reader->filter->andEqual($reader->model->uniqueName, $serviceName);        foreach ($reader->getData() as $serviceRequestRow) {            /** @var AbstractServiceRequest $phpClass */            $phpClass = new $serviceRequestRow->phpClass();            if ($phpClass->restrictedService) {                //(new Debug())->write('RESTRICTED');                $userInformation = new UserSession();                if (!$userInformation->isUserLogged()) {                    $response = new HttpResponse();                    $response->statusCode = StatusCode::FORBIDDEN;                    $response->sendResponse();                    exit;                }            }            $phpClass->onRequest();            $phpClass->render();            $found = true;        }        if (!$found) {            (new Debug())->write('No Service found. Unique Name: ' . $serviceName);        }    }}