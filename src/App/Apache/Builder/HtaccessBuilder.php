<?phpnamespace Nemundo\App\Apache\Builder;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\File\FileUtility;use Nemundo\Core\TextFile\Writer\TextFileWriter;// PasswordHtaccessBuilderclass HtaccessBuilder extends AbstractBase{    public $path;    public $message = 'Admin';    /**     * @var bool     */    public $passwordProtection = false;  // true;    public $rewriteEngine = false;    public $encodingList = [];    // createFile    public function buildFile()    {        $this->path = (new FileUtility())->appendDirectorySeparatorIfNotExists($this->path);        $filename = $this->path . '.htaccess';        $file = new TextFileWriter($filename);        $file->overwriteExistingFile = true;        if ($this->passwordProtection) {            $file->addLine('AuthType Basic');            $file->addLine('AuthName "' . $this->message . '"');            $file->addLine('AuthUserFile ' . $this->path . '.htpasswd');            $file->addLine('Require valid-user');        }        if ($this->rewriteEngine) {            $file->addLine('RewriteEngine on');            $file->addLine('RewriteCond %{REQUEST_FILENAME} !-f');            $file->addLine('RewriteCond %{REQUEST_URI} !/$');            $file->addLine('RewriteRule  ^(.*) index.php [L]');        }        foreach ($this->encodingList as $encoding) {            $file->addLine('AddEncoding ' . $encoding);        }        $file->writeFile();    }    public function addUser($user, $password)    {        // not working on windows        $filename = $this->path . '.htpasswd';        $file = new TextFileWriter($filename);        $file->overwriteExistingFile = true;        $encryptedPassword = crypt($password, base64_encode($password));        //$encryptedPassword = crypt($clearTextPassword, base64_encode($clearTextPassword));        $file->addLine($user . ':' . $encryptedPassword);        //$file->addLine($user . ':' . crypt($password, rand(10, 99)));        //$encrypted_password = crypt($password, base64_encode($password));        $file->writeFile();    }    public function addEncoding($encoding)    {        $this->encodingList[] = $encoding;        return $this;    }}