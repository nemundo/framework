<?php


namespace Nemundo\App\Manifest\Com\Form;


use Nemundo\App\Manifest\Builder\WebManifestBuilder;
use Nemundo\Html\Form\Input\AcceptFileType;
use Nemundo\Package\Bootstrap\Form\BootstrapForm;
use Nemundo\Package\Bootstrap\FormElement\BootstrapFileUpload;
use Nemundo\Package\Bootstrap\FormElement\BootstrapLargeTextBox;
use Nemundo\Package\Bootstrap\FormElement\BootstrapListBox;
use Nemundo\Package\Bootstrap\FormElement\BootstrapTextBox;
use Nemundo\Project\Path\WebPath;

class ManifestBuilderForm extends BootstrapForm
{

    /**
     * @var BootstrapTextBox
     */
    private $appName;

    /**
     * @var BootstrapTextBox
     */
    private $shortName;

    /**
     * @var BootstrapLargeTextBox
     */
    private $description;

    /**
     * @var BootstrapFileUpload
     */
    private $icon;

    /**
     * @var BootstrapTextBox
     */
    private $startUrl = '/';

    /**
     * @var BootstrapListBox
     */
    private $display = 'fullscreen';

    /**
     * @var BootstrapColorPicker
     */
    private $backgroundColor;

    private $themeColor;

    public function getContent()
    {

        $this->appName = new BootstrapTextBox($this);
        $this->appName->label = 'App Name';
        $this->appName->validation = true;

        $this->shortName = new BootstrapTextBox($this);
        $this->shortName->label = 'Short Name';
        $this->shortName->validation = true;

        $this->description = new BootstrapLargeTextBox($this);
        $this->description->label = 'Description';

        $this->icon = new BootstrapFileUpload($this);
        $this->icon->label = 'Icon';
        $this->icon->acceptFileType=AcceptFileType::IMAGE;

        $this->startUrl = new BootstrapTextBox($this);
        $this->startUrl->label = 'App Name';
        $this->startUrl->validation = true;
        $this->startUrl->value = '/';

        $this->display = new BootstrapListBox($this);
        $this->display->label = 'Display';
        $this->display->validation = true;
        $this->display->addItem('browser', 'Browser');
        $this->display->addItem('standalone', 'Standalone');
        $this->display->addItem('fullscreen', 'Fullscreen');
        $this->display->addItem('', '');


        return parent::getContent();

    }


    protected function onSubmit()
    {




        $builder = new WebManifestBuilder();
        $builder->appName = $this->appName->getValue();
        $builder->shortName = $this->shortName->getValue();
        $builder->description = $this->description->getValue();
        $builder->display = $this->display->getValue();


        if ($this->icon->hasValue()) {

            $filename=(new WebPath())
                ->addPath('img')
                ->addPath('icon.png')
                ->getFullFilename();

            $this->icon->getFileRequest()->saveFile($filename);

            $builder->icon = 'img/icon.png';

        }


        $builder->createFile();


        /*
                public $name;

                public $shortName;

                public $description;

                public $icon;

                public $startUrl = '/';

                public $display = 'fullscreen';

                public $backgroundColor;

                public $themeColor;*/


        parent::onSubmit(); // TODO: Change the autogenerated stub
    }

}