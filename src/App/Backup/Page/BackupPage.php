<?phpnamespace Nemundo\App\Backup\Page;use Nemundo\Admin\Com\Form\AdminSearchForm;use Nemundo\Admin\Com\Layout\AdminFlexboxLayout;use Nemundo\Admin\Com\Table\AdminTable;use Nemundo\Admin\Com\Table\AdminTableHeader;use Nemundo\Admin\Com\Table\Row\AdminTableRow;use Nemundo\App\Application\Com\ListBox\ApplicationListBox;use Nemundo\App\Backup\Com\Container\FileContainer;use Nemundo\App\Backup\Parameter\BackupParameter;use Nemundo\App\Backup\Path\ExportBackupPath;use Nemundo\App\Backup\Path\ImportBackupPath;use Nemundo\App\Backup\Reader\BackupDataReader;use Nemundo\App\Backup\Site\ExportSite;use Nemundo\App\Backup\Site\ImportSite;use Nemundo\Com\Template\AbstractTemplateDocument;use Nemundo\Html\Paragraph\Paragraph;class BackupPage extends AbstractTemplateDocument{    public function getContent()    {        $layout = new AdminFlexboxLayout($this);        $search = new AdminSearchForm($layout);        $application = new ApplicationListBox($search);        $application->searchMode = true;        $application->submitOnChange = true;        $p = new Paragraph($layout);        $table = new AdminTable($layout);        $reader = new BackupDataReader();        $reader->model->loadApplication();        if ($application->hasValue()) {            $reader->applicationId = $application->getValue();        }        $p->content = $reader->getTotalCount() . ' item found';        $header = new AdminTableHeader($table);        $header->addText($reader->model->application->label);        $header->addText($reader->model->phpClass->label);        $header->addText($reader->model->filename->label);        $header->addEmpty(2);        foreach ($reader->getData() as $backupRow) {            $row = new AdminTableRow($table);            $row->addText($backupRow->application->application);            $row->addText($backupRow->phpClass);            $row->addText($backupRow->filename);            $site = clone(ImportSite::$site);            $site->addParameter(new BackupParameter($backupRow->id));            $row->addSite($site);            $site = clone(ExportSite::$site);            $site->addParameter(new BackupParameter($backupRow->id));            $row->addSite($site);        }        $container = new FileContainer($layout);        $container->subtitle = 'Export';        $container->path = new ExportBackupPath();        $container = new FileContainer($layout);        $container->subtitle = 'Import';        $container->path = new ImportBackupPath();        /*$subtitle = new AdminSubtitle($layout);        $subtitle->content = 'Export Backup File';        $table = new AdminTable($layout);        $header = new TableHeader($table);        $header->addText('File');        $header->addText('Size');        $header->addEmpty();        $reader = new DirectoryReader();        $reader->path = (new ExportBackupPath())->getPath();        foreach ($reader->getData() as $file) {            $row = new TableRow($table);            $row->addText($file->getFilename());            $row->addText((new FileSize($file->getFileSize()))->getText());            $site = clone(DownloadSite::$site);            $site->addParameter(new FileParameter($file->getFilename()));            $row->addSite($site);        }*/        // Log        /*$widget = new AdminWidget($layout->col2);        $widget->widgetTitle = 'Dump Upload (Zip File)';        $dropzone = new DropzoneUploadForm($widget);        $dropzone->acceptedFileType=AcceptFileType::ZIP;        $dropzone->uploadSite = UploadSite::$site;        $widget = new AdminWidget($layout->col2);        $widget->widgetTitle = 'Restore Dump';        $table = new AdminBootstrapTable($widget);        $header = new TableHeader($table);        $header->addText('File');        $header->addText('Size');        $reader = new DirectoryReader();        $reader->path = (new RestoreBackupPath())->getPath();        foreach ($reader->getData() as $file) {            $row = new TableRow($table);            $row->addText($file->filename);            $row->addText($file->getFileSizeText());        }        /*        $code = new Code($widget);        $code->content = 'sudo php bin/cmd.php backup-dump';*/        /* $code = new Code($widget);         $code->content = 'sudo php bin/cmd.php backup-restore';*/        return parent::getContent();    }}