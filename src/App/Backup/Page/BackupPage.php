<?phpnamespace Nemundo\App\Backup\Page;use Nemundo\Admin\Com\Layout\AdminFlexboxLayout;use Nemundo\Admin\Com\Table\AdminBootstrapTable;use Nemundo\Admin\Com\Table\AdminTable;use Nemundo\Admin\Com\Table\AdminTableHeader;use Nemundo\Admin\Com\Table\Row\AdminTableRow;use Nemundo\Admin\Com\Title\AdminSubtitle;use Nemundo\Admin\Com\Widget\AdminWidget;use Nemundo\App\Backup\Data\Backup\BackupReader;use Nemundo\App\Backup\Parameter\FileParameter;use Nemundo\App\Backup\Path\BackupPath;use Nemundo\App\Backup\Path\DumpBackupPath;use Nemundo\App\Backup\Path\RestoreBackupPath;use Nemundo\App\Backup\Site\DownloadSite;use Nemundo\App\Backup\Site\UploadSite;use Nemundo\Com\TableBuilder\TableHeader;use Nemundo\Com\TableBuilder\TableRow;use Nemundo\Com\Template\AbstractTemplateDocument;use Nemundo\Core\File\DirectoryReader;use Nemundo\Core\File\FileSize;use Nemundo\Html\Form\Input\AcceptFileType;use Nemundo\Html\Typography\Code;use Nemundo\Package\Bootstrap\Layout\BootstrapTwoColumnLayout;use Nemundo\Package\Dropzone\DropzoneUploadForm;class BackupPage extends AbstractTemplateDocument{    public function getContent()    {        $layout = new AdminFlexboxLayout($this);        $table = new AdminTable($layout);        $reader = new BackupReader();        $reader->model->loadApplication();        $header = new AdminTableHeader($table);        $header->addText($reader->model->application->label);        $header->addText($reader->model->phpClass->label);        $header->addText($reader->model->filename->label);        foreach ($reader->getData() as $backupRow) {            $row = new AdminTableRow($table);            $row->addText($backupRow->application->application);            $row->addText($backupRow->phpClass);            $row->addText($backupRow->filename);        }        $subtitle = new AdminSubtitle($layout);        $subtitle->content = 'Backup File';        $table = new AdminTable($layout);        $header = new TableHeader($table);        $header->addText('File');        $header->addText('Size');        $header->addEmpty();        $reader = new DirectoryReader();        $reader->path = (new BackupPath())->getPath();        foreach ($reader->getData() as $file) {            $row = new TableRow($table);            $row->addText($file->getFilename());            $row->addText((new FileSize( $file->getFileSize()))->getText());            $site = clone(DownloadSite::$site);            $site->addParameter(new FileParameter($file->getFilename()));            $row->addSite($site);        }        /*$widget = new AdminWidget($layout->col2);        $widget->widgetTitle = 'Dump Upload (Zip File)';        $dropzone = new DropzoneUploadForm($widget);        $dropzone->acceptedFileType=AcceptFileType::ZIP;        $dropzone->uploadSite = UploadSite::$site;        $widget = new AdminWidget($layout->col2);        $widget->widgetTitle = 'Restore Dump';        $table = new AdminBootstrapTable($widget);        $header = new TableHeader($table);        $header->addText('File');        $header->addText('Size');        $reader = new DirectoryReader();        $reader->path = (new RestoreBackupPath())->getPath();        foreach ($reader->getData() as $file) {            $row = new TableRow($table);            $row->addText($file->filename);            $row->addText($file->getFileSizeText());        }        /*        $code = new Code($widget);        $code->content = 'sudo php bin/cmd.php backup-dump';*/       /* $code = new Code($widget);        $code->content = 'sudo php bin/cmd.php backup-restore';*/        return parent::getContent();    }}