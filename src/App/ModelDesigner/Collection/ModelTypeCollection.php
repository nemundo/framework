<?phpnamespace Nemundo\App\ModelDesigner\Collection;use Nemundo\App\ModelDesigner\Type\ExternalModelDesignerType;use Nemundo\App\ModelDesigner\Type\ImageModelDesignerType;use Nemundo\App\ModelDesigner\Type\TextModelDesignerType;use Nemundo\App\ModelDesigner\Type\VirtualExternalModelDesignerType;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\Sorting\SortingListOfObject;use Nemundo\Core\Type\AbstractType;use Nemundo\Model\Type\AbstractModelType;use Nemundo\Orm\Type\DateTime\CreatedDateTimeOrmType;use Nemundo\Orm\Type\DateTime\DateOrmType;use Nemundo\Orm\Type\DateTime\DateTimeOrmType;use Nemundo\Orm\Type\DateTime\ModifiedDateTimeOrmType;use Nemundo\Orm\Type\DateTime\TimeOrmType;use Nemundo\Orm\Type\File\FileOrmType;use Nemundo\Orm\Type\File\ImageOrmType;use Nemundo\Orm\Type\File\RedirectFilenameOrmType;use Nemundo\Orm\Type\File\CroppingImageOrmType;use Nemundo\Orm\Type\Geo\GeoCoordinateAltitudeOrmType;use Nemundo\Orm\Type\Geo\GeoCoordinateOrmType;use Nemundo\Orm\Type\Id\IdOrmType;use Nemundo\Orm\Type\Number\DecimalNumberOrmType;use Nemundo\Orm\Type\Number\LargeNumberOrmType;use Nemundo\Orm\Type\Number\NumberOrmType;use Nemundo\Orm\Type\Number\YesNoOrmType;use Nemundo\Orm\Type\Text\LargeTextOrmType;use Nemundo\Orm\Type\Text\TextOrmType;use Nemundo\Orm\Type\Text\TranslationLargeTextOrmType;use Nemundo\Orm\Type\Text\TranslationTextOrmType;use Nemundo\Orm\Type\User\CreatedUserOrmType;use Nemundo\Orm\Type\User\UserOrmType;class ModelTypeCollection extends AbstractBase{    /**     * @var AbstractType[]|TextOrmType[]|ExternalModelDesignerType[]|ImageOrmType[]     */    private static $typeList = [];    private static $loadedType = false;    public static function addType(AbstractModelType $type)    {        ModelTypeCollection::$typeList[] = $type;    }    public function loadDefaultType()    {    }    /**     * @return AbstractType[]|TextOrmType[]|ExternalModelDesignerType[]|VirtualExternalModelDesignerType[]|ImageOrmType[]     */    public function getTypeCollection()    {        if (!ModelTypeCollection::$loadedType) {            ModelTypeCollection::addType(new TextModelDesignerType());            ModelTypeCollection::addType(new ExternalModelDesignerType());            ModelTypeCollection::addType(new VirtualExternalModelDesignerType());            ModelTypeCollection::addType(new ImageModelDesignerType());            ModelTypeCollection::addType(new LargeTextOrmType());            ModelTypeCollection::addType(new NumberOrmType());            ModelTypeCollection::addType(new LargeNumberOrmType());            ModelTypeCollection::addType(new YesNoOrmType());            ModelTypeCollection::addType(new DecimalNumberOrmType());            ModelTypeCollection::addType(new DateTimeOrmType());            ModelTypeCollection::addType(new DateOrmType());            ModelTypeCollection::addType(new TimeOrmType());            ModelTypeCollection::addType(new CreatedDateTimeOrmType());            ModelTypeCollection::addType(new ModifiedDateTimeOrmType());            ModelTypeCollection::addType(new GeoCoordinateOrmType());            ModelTypeCollection::addType(new GeoCoordinateAltitudeOrmType());            ModelTypeCollection::addType(new FileOrmType());            ModelTypeCollection::addType(new RedirectFilenameOrmType());            ModelTypeCollection::addType(new CreatedUserOrmType());            ModelTypeCollection::addType(new UserOrmType());            ModelTypeCollection::addType(new IdOrmType());            ModelTypeCollection::addType(new TranslationTextOrmType());            ModelTypeCollection::addType(new TranslationLargeTextOrmType());            ModelTypeCollection::addType(new CroppingImageOrmType());            ModelTypeCollection::$loadedType = true;        }        $sorting = new SortingListOfObject();        $sorting->objectList = ModelTypeCollection::$typeList;        $sorting->sortingProperty = 'typeLabel';        $list = $sorting->getSortedListOfObject();        return $list;    }}