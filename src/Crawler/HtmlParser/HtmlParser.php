<?phpnamespace Nemundo\Crawler\HtmlParser;use Nemundo\Core\Base\AbstractBaseClass;use Nemundo\Core\Http\Response\StatusCode;use Nemundo\Core\Http\Url\UrlInformation;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\RegularExpression\RegularExpressionReader;use Nemundo\Core\Type\Text\Html;use Nemundo\Core\Validation\UrlValidation;use Nemundo\Core\WebRequest\CurlWebRequest;class HtmlParser extends AbstractBaseClass{    public $baseUrl = '';    /**     * @var string     */    private $html = '';    private $domain;    public function fromUrl($url)    {        $request = new CurlWebRequest();        $response = $request->getUrl($url);        if ($response->statusCode == StatusCode::OK) {            $this->html = $response->html;        } else {            (new LogMessage())->writeError('Url: ' . $url . ' Error: ' . $response->errorMessage);        }    }    public function fromHtml($html)    {        $this->html = $html;    }    public function getHtml()    {        return $this->html;    }    public function getLanguage() {        $re = new RegularExpressionReader();        $re->text = $this->html;        $re->regularExpression = '<html.*?lang="(.*?)".*?<';        $language = null;        if ($re->hasItems()) {            $language = trim($re->getDataRow()->getValue(0));            if ($language =='') {                $language = null;            }        }        return $language;    }    public function getPageTitle()    {        $re = new RegularExpressionReader();        $re->text = $this->html;        $re->regularExpression = '<title.*?>(.*?)<';        $pageTitle = '';        if ($re->hasItems()) {            $pageTitle = $re->getDataRow()->getValue(0);            //$pageTitle = utf8_encode($pageTitle);            $pageTitle = (new Html($pageTitle))->convertHtmlTags()->getValue();        }        return $pageTitle;    }    public function getDescription()    {        $re = new RegularExpressionReader();        $re->text = $this->html;        $re->regularExpression = '<meta name="description" content="(.*?)"';        //$re->regularExpression = '<meta name="description">(.*?)<';        $description = '';        if ($re->hasItems()) {            $description = $re->getDataRow()->getValue(0);            $description = (new Html($description))->removeHtmlTags()->getValue();        }        return $description;    }    public function getRssFeed()    {        $re = new RegularExpressionReader();        $re->text = $this->html;        $re->regularExpression = '<link rel="alternate".*?href="(.*?)".*?>';        $feedList = [];        foreach ($re->getData() as $item) {            $feedList[] = $item->getValue(0);        }        return $feedList;    }    public function getImage()    {        $re = new RegularExpressionReader();        $re->text = $this->html;        $re->regularExpression = '<img.*?src="(.*?)".*?>';        $imageList = [];        foreach ($re->getData() as $item) {            $imageUrl = $item->getValue(0);            if ($imageUrl !== '') {                $imageUrl = $this->getAbsoluteUrl($imageUrl);                $imageList[] = $imageUrl;            }        }        $imageList = array_unique($imageList);        return $imageList;    }    public function getVideoList()    {        $videoList = [];        $videoRe = new RegularExpressionReader();        $videoRe->text = $this->html;        $videoRe->regularExpression = '<video.*?>(.*?)</video>';        foreach ($videoRe->getData() as $videoItem) {            $sourceRe = new RegularExpressionReader();            $sourceRe->text = $this->html;            $sourceRe->regularExpression = '<source.*?src="(.*?)".*?>';            foreach ($sourceRe->getData() as $sourceItem) {                $videoUrl = $sourceItem->getValue(0);                if ($videoUrl !== '') {                    $videoUrl = $this->getAbsoluteUrl($videoUrl);                    $videoList[] = $videoUrl;                }            }        }        $videoList = array_unique($videoList);        return $videoList;    }    public function getParagraphList()    {        $paragraphList = [];        $re = new RegularExpressionReader();        $re->text = $this->html;        $re->regularExpression = '<p.*?>(.*?)</p>';        foreach ($re->getData() as $videoItem) {            $p = $videoItem->getValue(0);            $p = (new Html($p))->removeHtmlTags()->getValue();            if ($p !== '') {                $paragraphList[] =$p;            }        }        $paragraphList = array_unique($paragraphList);        return $paragraphList;    }    public function getHyperlink()    {        $re = new RegularExpressionReader();        $re->text = $this->html;        $re->regularExpression = '<a.*?href="(.*?)".*?>(.*?)</a>';        /** @var HyperlinkItem[] $hyperlinkList */        $hyperlinkList = [];        foreach ($re->getData() as $item) {            $url = $item->getValue(0);            $position = strpos($url, '#');            if ($position !== false) {                $url = substr($url, 0, $position);            }            if ($url !== '') {                $hyperlinItem = new HyperlinkItem();                $hyperlinItem->title = $item->getValue(1);                $hyperlinItem->url = $url;                $hyperlinItem->fullUrl = $this->getAbsoluteUrl($url);                $hyperlinItem->domain = (new UrlInformation($hyperlinItem->fullUrl))->getDomain();                if ((new UrlInformation($hyperlinItem->fullUrl))->getDomainWithScheme() !== $this->getDomain()) {                    $hyperlinItem->external = true;                }                $hyperlinkList[] = $hyperlinItem;            }        }        return $hyperlinkList;    }    private function getDomain()    {        if ($this->domain == null) {            $this->domain = (new UrlInformation($this->baseUrl))->getDomainWithScheme();        }        return $this->domain;    }    private function getAbsoluteUrl($url)    {        $absouteUrl = null;        if (!(new UrlValidation())->isUrl($url)) {            if (isset($url[0])) {                if ($url[0] == '/') {                    $absouteUrl = $this->getDomain() . $url;                } else {                    $absouteUrl = $this->baseUrl . $url;                }            }        } else {            $absouteUrl = $url;        }        return $absouteUrl;    }}